Quartz2D的API是纯C语言的

Quartz2D的API来自于Core Graphics框架

数据类型和函数基本都以CG作为前缀

语句最后的渲染到View上的语句有：
CGContextStrokePath(<#CGContextRef c#>)
CGContextFillPath(<#CGContextRef c#>)
CGContextDrawPath(<#CGContextRef c#>, <#CGPathDrawingMode mode#>)
………目测共同点都是最后加Path路径
总结****貌似DrawPath就是渲染样式的总集合（可以通过CGPathDrawingMode来设置样式）****
   ****FillPath、StrokePath就是不同的方式对应的渲染样式****

CGContextClosePath(<#CGContextRef c#>)关闭路径（连接起点和最后一个点）

CGContextSetLineWidth(<#CGContextRef c#>, <#CGFloat width#>)设置线宽

CGContextSetRGBStrokeColor(<#CGContextRef context#>, <#CGFloat red#>, <#CGFloat green#>, <#CGFloat blue#>, <#CGFloat alpha#>)设置线的颜色
CGContextSetStrokeColorWithColor(<#CGContextRef c#>, <#CGColorRef color#>)

CGContextSetLineCap(<#CGContextRef c#>, <#CGLineCap cap#>)设置线段头尾部的样式

CGContextSetLineJoin(<#CGContextRef c#>, <#CGLineJoin join#>)设置转折点的样式

===========》填充颜色
UIKit的方式
[[UIColor redColor]setFill];
CoreGraphics方式
CGContextSetFillColorWithColor(<#CGContextRef c#>, <#CGColorRef color#>)
CGContextSetRGBFillColor(<#CGContextRef context#>, <#CGFloat red#>, <#CGFloat green#>, <#CGFloat blue#>, <#CGFloat alpha#>)

注意：
[[UIColor redColor]set]
——set方式，表示同时设置空心于实心的颜色
——setStroke:设置空心颜色
——setFill  :设置实心颜色

/*
总结设置颜色的方式：
CGContextSet+方式+Color
CGContextSetRGB+方式+Color
*/


画圆弧
x/y :圆心
radius： 半径
startAngle:  开始角度
endAngle  :  结束角度
clockwise :  圆弧的延展方向（0：顺时针，1：逆时针）
CGContextAddArc(<#CGContextRef c#>, <#CGFloat x#>, <#CGFloat y#>, <#CGFloat radius#>, <#CGFloat startAngle#>, <#CGFloat endAngle#>, <#int clockwise#>)


画贝赛尔曲线
1：
UIBezierPath *path;
CGContextAddPath(ctx, path.CGPathRef);
2：
 CGContextAddCurveToPoint(<#CGContextRef c#>, <#CGFloat cp1x#>, <#CGFloat cp1y#>, <#CGFloat cp2x#>, <#CGFloat cp2y#>, <#CGFloat x#>, <#CGFloat y#>)


缩放坐标系比率
CGContextScaleCTM(ctx, scale.x, scale.y);

保存上下文
CGContextSaveGState(ctx);
// 恢复上下文
CGContextRestoreGState(ctx);


gradient创建方式：
方式一：
UIColor *startColor=[UIColor yellowColor];  
UIColor *endColor= [UIColor blueColor];  
UIColor *colors[2] = {startColor,endColor};  
CGFloat components[2*4];  
for (int i = 0; i < 2; i++) {  
    CGColorRef tmpcolorRef = colors[i].CGColor;  
    const CGFloat *tmpcomponents = CGColorGetComponents(tmpcolorRef);  
    for (int j = 0; j < 4; j++) {  
        components[i * 4 + j] = tmpcomponents[j];  
    }  
}  

方式二：
CGFloat components[8]={  
    1.0, 1.0, 0.0, 1.0,     //start color(r,g,b,alpha)  
    0.0, 0.0, 1.0, 1.0      //end color  
};  
CGColorSpaceRef space = CGColorSpaceCreateDeviceRGB();  
CGGradientRef gradient = CGGradientCreateWithColorComponents(space, components, NULL,2);  
CGColorSpaceRelease(space),space=NULL;//release  

方式三：
// 创建色彩空间对象
CGColorSpaceRef colorSpaceRef = CGColorSpaceCreateDeviceRGB();
// 创建起点颜色
CGColorRef endColor = CGColorCreate(colorSpaceRef, (CGFloat[]){0.99f, 200.0 / 255, 22.0 / 255, 1.0f});
// 创建终点颜色
CGColorRef beginColor = CGColorCreate(colorSpaceRef, (CGFloat[]){0.99f, 0.99f, 0.88f, 1.0f});
// 创建颜色数组
CFArrayRef colorArray = CFArrayCreate(kCFAllocatorDefault, (const void*[]){beginColor, endColor}, 2, nil);
// 创建渐变对象
CGGradientRef gradientRef = CGGradientCreateWithColors(colorSpaceRef, colorArray, (CGFloat[]){
            0.0f,       // 对应起点颜色位置
            1.0f        // 对应终点颜色位置
        });
// 释放颜色数组
CFRelease(colorArray);
// 释放起点和终点颜色
CGColorRelease(beginColor);
CGColorRelease(endColor);
// 释放色彩空间
CGColorSpaceRelease(colorSpaceRef);